{"ast":null,"code":"import axios from \"axios\";\nimport { returnErrors } from \"./messages.js\";\nimport { USER_LOADED, USER_LOADING, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT_SUCCESS } from \"./types.js\";\nexport const loadUser = () => (dispatch, getState) => {\n  //User loading\n  dispatch({\n    type: USER_LOADING\n  });\n  axios.get(\"http://localhost:8000/api/auth/user\", tokenConfig(getState)).then(res => {\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    });\n  }).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status));\n    dispatch({\n      type: AUTH_ERROR\n    });\n  });\n}; //LOGIN USER\n\nexport const login = (username, password) => dispatch => {\n  console.log(\"hello me login\"); //headers\n\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  }; //REquest Body\n\n  const body = JSON.stringify({\n    username: username,\n    password: password\n  });\n  axios.post(\"http://localhost:8000/api/auth/login\", body, config).then(res => {\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    });\n  }).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status));\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  });\n}; //LOGOUT USER\n\nexport const logout = () => (dispatch, getState) => {\n  console.log(\"wasCLick\");\n  axios.post(\"http://localhost:8000/api/auth/logout/\", null, tokenConfig(getState)).then(res => {\n    dispatch({\n      type: LOGOUT_SUCCESS\n    });\n  }).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status));\n  });\n}; // Setup config with token - helper function\n\nexport const tokenConfig = getState => {\n  // Get token from state\n  const token = getState().auth.token; // Headers\n\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  }; // If token, add to headers config\n\n  if (token) {\n    config.headers[\"Authorization\"] = `Token ${token}`;\n  }\n\n  return config;\n};","map":{"version":3,"sources":["/Users/mathena/Desktop/*/COVID-19/frontend/src/actions/auth.js"],"names":["axios","returnErrors","USER_LOADED","USER_LOADING","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT_SUCCESS","loadUser","dispatch","getState","type","get","tokenConfig","then","res","payload","data","catch","err","response","status","login","username","password","console","log","config","headers","body","JSON","stringify","post","logout","token","auth"],"mappings":"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","sourcesContent":["import axios from \"axios\";\n\nimport { returnErrors } from \"./messages.js\";\n\nimport {\n  USER_LOADED,\n  USER_LOADING,\n  AUTH_ERROR,\n  LOGIN_SUCCESS,\n  LOGIN_FAIL,\n  LOGOUT_SUCCESS,\n} from \"./types.js\";\n\nexport const loadUser = () => (dispatch, getState) => {\n  //User loading\n  dispatch({ type: USER_LOADING });\n  axios\n    .get(\"http://localhost:8000/api/auth/user\", tokenConfig(getState))\n    .then(res => {\n      dispatch({\n        type: USER_LOADED,\n        payload: res.data\n      });\n    })\n    .catch((err) => {\n      dispatch(returnErrors(err.response.data, err.response.status));\n      dispatch({\n        type: AUTH_ERROR,\n      });\n    });\n};\n\n//LOGIN USER\nexport const login = (username, password) => (dispatch) => {\n  console.log(\"hello me login\");\n\n  //headers\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  };\n  //REquest Body\n  const body = JSON.stringify({\n    username: username,\n    password: password,\n  });\n\n  axios\n    .post(\"http://localhost:8000/api/auth/login\", body, config)\n    .then((res) => {\n      dispatch({\n        type: LOGIN_SUCCESS,\n        payload: res.data,\n      });\n    })\n    .catch((err) => {\n      dispatch(returnErrors(err.response.data, err.response.status));\n      dispatch({\n        type: LOGIN_FAIL,\n      });\n    });\n};\n//LOGOUT USER\n\nexport const logout = () => (dispatch, getState) => {\n    console.log(\"wasCLick\");\n  axios\n    .post(\"http://localhost:8000/api/auth/logout/\", null, tokenConfig(getState))\n    .then((res) => {\n      dispatch({\n        type: LOGOUT_SUCCESS,\n      });\n    })\n    .catch((err) => {\n      dispatch(returnErrors(err.response.data, err.response.status));\n    });\n};\n\n\n// Setup config with token - helper function\nexport const tokenConfig = getState => {\n    // Get token from state\n    const token = getState().auth.token;\n  \n    // Headers\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n  \n    // If token, add to headers config\n    if (token) {\n      config.headers[\"Authorization\"] = `Token ${token}`;\n    }\n  \n    return config;\n  };"]},"metadata":{},"sourceType":"module"}