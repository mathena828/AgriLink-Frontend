{"ast":null,"code":"import axios from 'axios';\nimport { returnErrors } from './messages.js';\nimport { USER_LOADED, USER_LOADING, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL } from './types.js';\nexport const loadUser = () => (dispatch, getState) => {\n  //User loading\n  dispatch({\n    type: USER_LOADING\n  }); //Get token from state\n\n  const token = getState().auth.token; //headers\n\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }; //if token, add to headers config\n\n  if (token) {\n    config.headers['Authorization'] = 'Token ${token}';\n  }\n\n  axios.get('http://localhost:8000/api/auth/user', config).then(res => {\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    });\n  }).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status));\n    dispatch({\n      type: AUTH_ERROR\n    });\n  });\n}; //LOGIN USER\n\nexport const login = (username, password) => dispatch => {\n  console.log(\"hello me login\"); //headers\n\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }; //REquest Body\n\n  const body = JSON.stringify({\n    username: username,\n    password: password\n  });\n  axios.post('http://localhost:8000/api/auth/login', body, config).then(res => {\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    });\n  }).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status));\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  });\n}; //LOGOUT USER\n\nexport const logoutUser = () => (dispatch, getState) => {\n  //Get token from state\n  const token = getState().auth.token; //headers\n\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }; //if token, add to headers config\n\n  if (token) {\n    config.headers['Authorization'] = 'Token ${token}';\n  }\n\n  axios.get('http://localhost:8000/api/auth/user', config).then(res => {\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    });\n  }).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status));\n    dispatch({\n      type: AUTH_ERROR\n    });\n  });\n};","map":{"version":3,"sources":["/home/china/Desktop/upri/COVID-19-Frontend/src/actions/auth.js"],"names":["axios","returnErrors","USER_LOADED","USER_LOADING","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","loadUser","dispatch","getState","type","token","auth","config","headers","get","then","res","payload","data","catch","err","response","status","login","username","password","console","log","body","JSON","stringify","post","logoutUser"],"mappings":"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","sourcesContent":["import axios from 'axios';\n\nimport { returnErrors} from './messages.js';\n\nimport {\n    USER_LOADED,\n    USER_LOADING,\n    AUTH_ERROR,\n    LOGIN_SUCCESS,\n    LOGIN_FAIL\n} from './types.js';\n\nexport const loadUser = () => (dispatch, getState) =>{\n    //User loading\n    dispatch({type: USER_LOADING});\n\n    //Get token from state\n    const token = getState().auth.token;\n\n    //headers\n    const config = {\n        headers:{\n            'Content-Type': 'application/json'\n        }\n    }\n\n    //if token, add to headers config\n    if(token){\n        config.headers['Authorization'] = 'Token ${token}';\n    }\n\n    axios.get('http://localhost:8000/api/auth/user', config)\n        .then(res => {\n            dispatch({\n                type: USER_LOADED,\n                payload:res.data\n            })\n        }).catch(err =>{\n            dispatch(returnErrors(err.response.data, err.response.status));\n            dispatch({\n                type: AUTH_ERROR\n            });\n        })\n}\n\n//LOGIN USER\nexport const login = (username, password) => dispatch=>{\n    console.log(\"hello me login\");\n\n    //headers\n    const config = {\n        headers:{\n            'Content-Type': 'application/json'\n        }\n    }\n    //REquest Body\n    const body = JSON.stringify({\n        username: username,\n        password: password\n    });\n\n    axios.post('http://localhost:8000/api/auth/login', body, config)\n        .then(res => {\n            dispatch({\n                type: LOGIN_SUCCESS,\n                payload:res.data\n            })\n        }).catch(err =>{\n            dispatch(returnErrors(err.response.data, err.response.status));\n            dispatch({\n                type: LOGIN_FAIL\n            });\n        })\n}\n\n//LOGOUT USER\nexport const logoutUser = () => (dispatch, getState) =>{\n\n\n    //Get token from state\n    const token = getState().auth.token;\n\n    //headers\n    const config = {\n        headers:{\n            'Content-Type': 'application/json'\n        }\n    }\n\n    //if token, add to headers config\n    if(token){\n        config.headers['Authorization'] = 'Token ${token}';\n    }\n\n    axios.get('http://localhost:8000/api/auth/user', config)\n        .then(res => {\n            dispatch({\n                type: USER_LOADED,\n                payload:res.data\n            })\n        }).catch(err =>{\n            dispatch(returnErrors(err.response.data, err.response.status));\n            dispatch({\n                type: AUTH_ERROR\n            });\n        })\n}\n\n"]},"metadata":{},"sourceType":"module"}