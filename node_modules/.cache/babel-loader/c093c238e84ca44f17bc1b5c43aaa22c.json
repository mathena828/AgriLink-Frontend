{"ast":null,"code":"import axios from \"axios\";\nimport { returnErrors } from \"./messages.js\";\nimport { USER_LOADED, USER_LOADING, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT_SUCCESS } from \"./types.js\";\nexport const loadUser = () => (dispatch, getState) => {\n  //User loading\n  dispatch({\n    type: USER_LOADING\n  }); //Get token from state\n\n  const token = getState().auth.token; //headers\n\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  }; //if token, add to headers config\n\n  if (token) {\n    config.headers[\"Authorization\"] = \"Token ${token}\";\n  }\n\n  axios.get(\"http://localhost:8000/api/auth/user\", config).then(res => {\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    });\n  }).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status));\n    dispatch({\n      type: AUTH_ERROR\n    });\n  });\n}; //LOGIN USER\n\nexport const login = (username, password) => dispatch => {\n  console.log(\"hello me login\"); //headers\n\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  }; //REquest Body\n\n  const body = JSON.stringify({\n    username: username,\n    password: password\n  });\n  axios.post(\"http://localhost:8000/api/auth/login\", body, config).then(res => {\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    });\n  }).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status));\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  });\n};\nexport const logout = () => async (dispatch, getState) => {\n  console.log(\"hello me logout\"); //Get token from state\n\n  const token = getState().auth.token; //headers\n\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  }; //if token, add to headers config\n\n  if (token) {\n    config.headers[\"Authorization\"] = \"Token ${token}\";\n  }\n\n  await axios.post(\"http://localhost:8000/api/auth/logout\", null, config).then(res => {\n    dispatch({\n      type: LOGOUT_SUCCESS\n    });\n  }).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status));\n  });\n};","map":{"version":3,"sources":["/Users/mathena/Desktop/*/COVID-19/frontend/src/actions/auth.js"],"names":["axios","returnErrors","USER_LOADED","USER_LOADING","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT_SUCCESS","loadUser","dispatch","getState","type","token","auth","config","headers","get","then","res","payload","data","catch","err","response","status","login","username","password","console","log","body","JSON","stringify","post","logout"],"mappings":"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","sourcesContent":["import axios from \"axios\";\n\nimport { returnErrors } from \"./messages.js\";\n\nimport {\n  USER_LOADED,\n  USER_LOADING,\n  AUTH_ERROR,\n  LOGIN_SUCCESS,\n  LOGIN_FAIL,\n  LOGOUT_SUCCESS,\n} from \"./types.js\";\n\nexport const loadUser = () => (dispatch, getState) => {\n  //User loading\n  dispatch({ type: USER_LOADING });\n\n  //Get token from state\n  const token = getState().auth.token;\n\n  //headers\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  };\n\n  //if token, add to headers config\n  if (token) {\n    config.headers[\"Authorization\"] = \"Token ${token}\";\n  }\n\n  axios\n    .get(\"http://localhost:8000/api/auth/user\", config)\n    .then((res) => {\n      dispatch({\n        type: USER_LOADED,\n        payload: res.data,\n      });\n    })\n    .catch((err) => {\n      dispatch(returnErrors(err.response.data, err.response.status));\n      dispatch({\n        type: AUTH_ERROR,\n      });\n    });\n};\n\n//LOGIN USER\nexport const login = (username, password) => (dispatch) => {\n  console.log(\"hello me login\");\n\n  //headers\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  };\n  //REquest Body\n  const body = JSON.stringify({\n    username: username,\n    password: password,\n  });\n\n  axios\n    .post(\"http://localhost:8000/api/auth/login\", body, config)\n    .then((res) => {\n      dispatch({\n        type: LOGIN_SUCCESS,\n        payload: res.data,\n      });\n    })\n    .catch((err) => {\n      dispatch(returnErrors(err.response.data, err.response.status));\n      dispatch({\n        type: LOGIN_FAIL,\n      });\n    });\n};\n\nexport const logout = () => async (dispatch, getState) => {\n  console.log(\"hello me logout\");\n  //Get token from state\n  const token = getState().auth.token;\n\n  //headers\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  };\n\n  //if token, add to headers config\n  if (token) {\n    config.headers[\"Authorization\"] = \"Token ${token}\";\n  }\n\n  await axios\n    .post(\"http://localhost:8000/api/auth/logout\", null, config)\n    .then((res) => {\n      dispatch({\n        type: LOGOUT_SUCCESS,\n      });\n    })\n    .catch((err) => {\n      dispatch(returnErrors(err.response.data, err.response.status));\n    });\n};\n"]},"metadata":{},"sourceType":"module"}